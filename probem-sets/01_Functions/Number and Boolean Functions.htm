
<!-- saved from url=(0040)http://ncssm.edu/~yeh/hw/Functions1.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>Number and Boolean Functions</title>
<style type="text/css"></style></head><body>

<h2><i>Won't you take me to... function town?</i></h2>

<hr>
<h3>Warm-ups</h3>
<pre>Use Python to compute
i) the sum of the degree measures of the angles of a 1000-gon.  (Evaluate 180 (n - 2) for n = 1000)
ii) the remainder when you divide 43297 by 34
iii) the area of a triangle with base 7842 and height 2342?
iv) the volume of a sphere with radius 1?  (watch out for integer division!!!)
v) the solutions of 3x2 - 6x - 8 = 0  (use a variable to avoid redundant computation!!!)

Define these as functions
vi)
nGonAngleSum ( 6 )	-&gt;	720
nGonAngleSum ( 1000 )	-&gt;	179640

vii) # use %
remainder ( 100 , 13 )		-&gt;	9
remainder ( 43297 , 34 )	-&gt;	15

viii)  # 1/2 base times height
triangleArea ( 10 , 9 )		-&gt;	45
triangleArea ( 7842 , 2342 )	-&gt;	9182982

ix)  # watch out for integer division
sphereVolume ( 1.0 )	-&gt;	4.1887902047863905
sphereVolume ( 2.8 )	-&gt;	91.952322575470831

x)  # lengths of three sides use Heron's formula
triangleArea360 ( 3 , 3 , 3 ) -&gt; 3.897
triangleArea360 ( 7 , 8 , 9 ) -&gt; 26.832
triangleArea360 ( 3 , 4 , 5 ) -&gt; 6.0

xi)  # distance to origin
magnitude ( 5 , 5 )	-&gt;	7.0710678118654755
magnitude ( 12 , 5 )	-&gt;	13.0

xii)
mitosis ( 4 )	-&gt;	(4 , 4)
mitosis ( 10 )	-&gt;	(10 , 10)

xiii)  # ignore complex numbers and unique solutions (for now)
quadratic ( 1 , 10 , 25 )	-&gt;	(-5.0 , -5.0)
quadratic ( 3 , -6 , -8 )	-&gt;	(2.9148542155126762, -0.91485421551267621)

## NO HORIZONTAL/VERTICAL LINES (yet)
xiv)
midpoint ( 1,2 , 3,4 )	-&gt;	(2.0 , 3.0)
midpoint ( 5,0 , -3,11)	-&gt;	(1.0 , 5.5)

xv)
slope ( 1,2 , 3,4 )	-&gt;	1.0	
slope ( 5,0 , -3,11)	-&gt;	-1.375

xvi)
perpBisector ( 1,2 , 3,4 )	-&gt;	(-1.0 , 5.0)  # y= -x+5	
perpBisector ( 5,0 , -3,11)	-&gt;	(.727 , 4.772)

xvii) # intersection of the perpendicular bisectors (equidistant to the three points)
circumCenter ( 0,0 , 6,8 , 8,4 )	-&gt;	(3 , 4)

xviii)
isDivisible ( 111111111 , 9 )	-&gt;	True
isDivisible ( 111111111 , 10 )	-&gt;	False

xix)
isEven ( 12321 )	-&gt;	False
isEven ( 984 )		-&gt;	True

xx)  
nand ( False , False )	-&gt;	True
nand ( False , True )	-&gt;	True
nand ( True , False )	-&gt;	True
nand ( True , True )	-&gt;	False

forever xxi) # exactly two matching arguments?
onePair ( 2 , 2 , 3 )	-&gt;	True
onePair ( 3 , 3 , 3 )	-&gt;	False

from math import * ## so you can use math.pi and everything else in 
<a href="http://docs.python.org/library/math.html#module-math">
http://docs.python.org/library/math.html#module-math</a>
</pre>

<hr>

<h4>**** 1.) *****</h4>
<pre>a.)  # use math.floor() you can neglect any floating-point display discrepancies
mantissa ( 3.1415 )	-&gt;	0.1415
mantissa ( 60.0 )	-&gt;	0.0
mantissa ( -7.1 )	-&gt;	0.9

b.)
combine3Digits ( 4,1,6 )	-&gt;	416
combine3Digits ( 0,5,9 )	-&gt;	59

c.)  # use %
lastDigit ( 6 )		-&gt;	6
lastDigit ( 234 )	-&gt;	4
lastDigit ( 98435920 )	-&gt;	0

d.) # use math.log() and int()
numDigits ( 3 )		-&gt;	1
numDigits ( 78 )	-&gt;	2
numDigits ( 948237 )	-&gt;	6

$$e.)
leadingDigit ( 6 )		-&gt;	6
leadingDigit ( 234 )		-&gt;	2
leadingDigit ( 98435920 )	-&gt;	9

$f.) # assume a 24 hour clock 
minutesElapsed ( 2 , 11 , 2 , 54 )	-&gt;	43
minutesElapsed ( 5 , 45 , 7 , 15 )	-&gt;	90
minutesElapsed ( 12 , 30 , 1 , 10 )	-&gt;	-680
minutesElapsed ( 11 , 6 , 7 , 8 )	-&gt;	-238

<font color="AAAAAA">
$$$$$$g.)
precision ( 3.1415 )	-&gt;	4
precision ( 123.456789 )	-&gt;	6
</font>

$$$h.) # use precision as a 'black box'
unscaledValue ( 3.1415 )	-&gt;	31415
unscaledValue ( 123.456789 )	-&gt;	123456789
</pre>

<hr>
<h4>**** 2.) *****</h4>
<pre>
c.)  # law of sines/cosines
solveTriangle (9 , 9 , 9)	-&gt;	(1.0471975511965976 , 1.0471975511965976 , 1.0471975511965976)
solveTriangle (3 , 4 , 5)	-&gt;	(0.64350110879328437 , 0.9272952180016123 , 1.5707963267948966)
solveTriangle (4 , 5 , 3)	-&gt;	(0.9272952180016123 , 1.5707963267948966 , 0.64350110879328437)

d.) #  return the point where lines y=3x-4 and y=2x+6 intersect
intersect ( 3,-4 , 2,6 )	-&gt;	(10 , 26)
intersect ( 0,5 , -1,4 )	-&gt;	(-1 , 5)

$e.)  # where is 6 between 4 and 8, interpolating from 0-1?
interpolate ( 4 , 8 , 6 )	-&gt;	0.5
interpolate ( 4 , 8 , 4 )	-&gt;	0
interpolate ( 4 , 8 , 8 )	-&gt;	1
interpolate ( 0 , 60 , 72 )	-&gt;	1.2
interpolate ( -10 , 15 , -30 )	-&gt;	-0.8

$$$$f.)  # see me if you'd like to try a triangular, 2-D version of interpolate
</pre>
<hr>

<h4>**** 3.) Booleans: <font color="red">Hot</font> 'n <font color="blue">Cold!</font> *****</h4>
<div style="{background: url(http://media.prefixmag.com/site_media/uploads/images/artists/k/katy-perry/500x333_katy-perry-2.jpg) no-repeat fixed opacity:50%}">
<pre>

a.)
areIncreasing ( 4 , 6 , 7 )	-&gt;	True
areIncreasing ( 2 , 11 , 9 )	-&gt;	False
areIncreasing ( 13 , 1 , 3 )	-&gt;	False

b.)
exactlyTwoDigits ( 23 )		-&gt;	True
exactlyTwoDigits ( -23 )	-&gt;	True
exactlyTwoDigits ( 213 )	-&gt;	False
exactlyTwoDigits ( -213 )	-&gt;	False
exactlyTwoDigits ( -4 )		-&gt;	False

c.)
nor ( False , False )	-&gt;	True
nor ( False , True )	-&gt;	False
nor ( True , False )	-&gt;	False
nor ( True , True )	-&gt;	False

$d.)
xor ( False , False )	-&gt;	False
xor ( False , True )	-&gt;	True
xor ( True , False )	-&gt;	True
xor ( True , True )	-&gt;	False

e.)  #  a + b &gt; c ?
validTriangle ( 3 , 4 , 5 )	-&gt;	True
validTriangle ( 10 , 4 , 6 )	-&gt;	False

$$$$f.)  # is point (5,5) inside the triangle?
inInterior ( 0,0 , 6,8 , 8,4 , 5,5 )	-&gt;	True
inInterior ( 0,0 , 6,8 , 8,4 , 3,4 )	-&gt;	False

</pre>
</div>
<hr>

<ul>Comments
 <li>These should take you a total of ~ 2-3 hours of active code-typing time.  If you find yourself stuck idly for longer than ten minutes, get help - if you find you're spending longer than 2-3 hours actively typing code, you're probably behind in class.</li>
 <li>The test arguments are by no means exhaustive - you should conceive your own to test your solutions more robustly</li>
</ul>



</body></html>
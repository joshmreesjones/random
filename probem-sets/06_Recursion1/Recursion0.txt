Recursion Warm-ups

Define each function recursively, using the given formulation:

1)
# multiply the integers from x to y
rangeProduct ( 5 , 10 ) ->  151200

rangeProduct ( 5 , 10 ) ->  5 * rangeProduct ( 6 , 10 )
rangeProduct ( 10 , 10 ) ->  10

2)
# sum of the digits
digitalRoot ( 27705 ) -> 3

digitalRoot ( 27705 ) ->  digitalRoot ( 21 )
digitalRoot ( 21 ) ->  digitalRoot ( 3 )
digitalRoot ( 3 ) ->  3


3)
primeFactorization ( 12 ) ->  [2,2,3]

primeFactorization ( 12 )  ->  [2] + primeFactorization ( 6 )
primeFactorization ( 6 )  ->  [2] + primeFactorization ( 3 )
primeFactorization ( 3 )  ->  [3] + primeFactorization ( 1 )
primeFactorization ( 1 ) ->  []



4)
format ( 3102587 ) ->  '3,102,587'

format ( 3102587 ) ->  format ( 3102 ) + ',587'
format ( 3 ) ->   '3'



5)
count ( 'i' , 'mississippi' ) ->  4
count ( 'm' , 'mississippi' ) ->  1

count ( 'i' , 'mississippi' ) ->  0 + count ( 'i' , 'ississippi' )
count ( 'm' , 'mississippi' ) ->  1 + count ( 'm' , 'ississippi' )
count ( 'i' , '' ) -> 0


6)
isSubset ( 'ioa' , 'aeiou' )  -> True
isSubset ( 'gray' , 'roygbiv' )  -> False

isSubset ( 'ioa' , 'aeiou' )  -> ('i' in 'aeiou') and isSubset ('oa' , 'aeiou')
isSubset ( '' , 'aeiou' )  -> True


7)
implode ( [2,7,7,0,7] ) ->  27707

implode ( [2,7,7,0,7] ) ->  10*implode ( [2,7,7,0] ) + 7
implode ( [] )  -> 0


8)
sort ( [3,1,4,1,5,9,2,6] )  ->  [1,1,2,3,4,5,6,9] 

sort ( [3,1,4,1,5,9,2,6] )  ->  [1] + sort ( [3,4,1,5,9,2,6] )
sort ( [] ) ->  []
